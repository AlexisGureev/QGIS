/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/3d/qgs3dmapcanvas.h                                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/








class Qgs3DMapCanvas : QWindow
{
%Docstring(signature="appended")
Convenience wrapper to simplify the creation of a 3D window ready to be
used with QGIS.

.. note::

   This is a port of qtwindow3d which does not set the default surface when initialized.

.. note::

   The default surface must be set before the construction of the QApplication when using shared OpenGL context.

.. note::

   This is required in order to use QT3d and QtWebEngine at the same time.

.. versionadded:: 3.36
%End

%TypeHeaderCode
#include "qgs3dmapcanvas.h"
%End
  public:
    Qgs3DMapCanvas();
    ~Qgs3DMapCanvas();

    Qgs3DMapSettings *mapSettings();
%Docstring
Returns access to the 3D scene configuration
%End

    Qgs3DMapScene *scene();
%Docstring
Returns access to the 3D scene (root 3D entity)
%End

    QgsCameraController *cameraController();
%Docstring
Returns access to the view's camera controller. Returns ``None`` if the
scene has not been initialized yet with
:py:func:`~Qgs3DMapCanvas.setMapSettings`
%End

    QgsRayCastResult castRay( const QPoint &screenPoint, QgsRayCastContext context );
%Docstring
Casts a ray towards the 3d scene and returns information about the
intersected 3d entities.

:param screenPoint: The ray starts from the current camera center and
                    goes through this point (in pixel coordinates,
                    originating at top left corner).
:param context: A context object defining parameters for the ray
                casting.

.. versionadded:: 4.0
%End


  protected:
    virtual void showEvent( QShowEvent *e );

%Docstring
Manages the display events specified in e.
%End

    virtual void resizeEvent( QResizeEvent * );

%Docstring
Resets the aspect ratio of the 3D window.
%End

    virtual bool eventFilter( QObject *watched, QEvent *event );


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/3d/qgs3dmapcanvas.h                                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
